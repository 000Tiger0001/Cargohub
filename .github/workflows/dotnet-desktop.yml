name: .NET Core Desktop

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Cargohub.sln # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Cargo\Tests\Tests.csproj # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Step 1: Start the server
      - name: Run the server
        run: |
          # Run your server (e.g., start your application)
          dotnet run --project Cargo\api\Cargo.csproj &
          echo $! > server.pid # Save the server process ID for later use

      # Step 2: Run your test that requires the server
      - name: Run Unit Test with Server
        run: |
          dotnet test

      # Step 3: Stop the server
      - name: Stop Server
        run: |
          kill $(cat server.pid) # Gracefully stop the server using the saved process ID
