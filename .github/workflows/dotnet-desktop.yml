name: .NET Core Desktop

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: Cargohub.sln
      Test_Project_Path: Cargo\Tests\Tests.csproj
      Wap_Project_Directory: your-wap-project-directory-name
      Wap_Project_Path: your-wap-project-path

    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install .NET SDK
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Setup MSBuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      # Start the server using 'dotnet run'
      - name: Start API Server
        run: |
          # Start the server in the background
          start /b dotnet run --project YourApiProjectDirectory &

          # Wait for the server to be fully ready
          echo "Waiting for server to start..."
          timeout /t 15 /nobreak  # Give 15 seconds for the server to start (adjust this as needed)

          # Optionally, you can use a health check to ensure the server is responding
          echo "Checking if server is up..."
          curl --silent --fail http://localhost:3000 || (echo "Server is not running" && exit 1)

      # Run the tests
      - name: Execute unit tests
        run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

      # Optionally, stop the server after tests (if needed)
      - name: Stop the server
        run: taskkill /IM dotnet.exe /F || true
